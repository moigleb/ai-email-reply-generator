import { OpenAI } from 'openai';
import { Request, Response } from 'express';

export default async function handler(req: Request, res: Response) {
  try {
    // console.log('‚è≥ Incoming request:', req.method, req.body); // –õ–æ–≥ –¥–ª—è –∑–∞–ø–∏—Ç—É
    console.log('‚è≥ process.env.OPENAI_API_KEY:', process.env.OPENAI_API_KEY); // –õ–æ–≥ –¥–ª—è –∑–∞–ø–∏—Ç—É

    if (req.method === 'POST') {
      const { prompt } = req.body;

      if (!prompt) {
        return res.status(400).json({ error: 'Prompt is required' });
      }

      console.log('Received prompt:', prompt); // –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö

      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });

      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo', // –∞–±–æ —ñ–Ω—à–∏–π –º–æ–¥–µ–ª—å
        messages: [{ role: 'user', content: prompt }],
      });

      console.log('OpenAI response:', completion); // –õ–æ–≥ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OpenAI

      res.status(200).json({ text: completion.choices[0]?.message?.content });
    } else {
      res.status(405).json({ error: 'Method Not Allowed' });
    }
  } catch (error) {
    console.error('üí• Server error:', error); // –õ–æ–≥ –¥–ª—è –ø–æ–º–∏–ª–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    res.status(500).json({ error: 'A server error has occurred' });
  }
}
